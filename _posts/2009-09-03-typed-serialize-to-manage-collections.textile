---
layout: post
post_description: Using the typed_serialize gem to handle collections of associations - as demonstrated a la video game character through equipped items and an inventory.
---

So you're making a game.  Some ajaxy thing with menus, maps, boards, and feeds.. maybe chat.
You've also got yer Character model ready, and your Item model - a few items even.  
You're thinking about making some sort of Inventory model, but you're not sure how
you want to go about it.

Let me highly suggest that you use the <a href="http://github.com/jqr/typed_serialize/tree/master">typed_serialize (instructions)</a> plugin.  Just hear me out.

If you haven't already, let's rake and make those base models. Note your typed serialized columns
(in this case inventory's items and equipped columns) must be of type string.

{% highlight sh %}
  script/generate model Character name:string adjective:string max_hp:integer hp:integer max_mp:integer mp:integer str:integer dex:integer con:integer spir:integer int:integer wis:integer char:integer
  script/generate model Item name:string location:string use_function:string modifier:string weight:integer
  script/generate model Inventory character:references items:string equipped:string
  rake db:migrate
{% endhighlight %}

A character and a few items (in irb):

{% highlight irb %}
  Character.create(:name => 'HugKnight', :adjective => 'complicated')
  Item.create(:name => 'cracked leather armor', :location => "torso", :modifier => 5 )
  Item.create(:name => 'sling', :location => "on_hand", :modifier => 2 )
  Item.create(:name => 'odd potion', :modifier => 2, :use_function => "character.hp = character.hp + modifier; character.save")  
{% endhighlight %}

Next add the character associations.
app/models/character.rb

{% highlight ruby %}
  class Character < ActiveRecord::Base
    has_one :inventory
  end
{% endhighlight %}

Now we add the inventory associations, and tell rails about our typed serialize columns.

{% highlight ruby %}
  class Inventory < ActiveRecord::Base
    belongs_to :character

    typed_serialize :items Array
    typed_serialize :equipped Hash

    def items
      super.collect do |item_id|
        Item.find(item_id)
      end
    end
  end
{% endhighlight %}


